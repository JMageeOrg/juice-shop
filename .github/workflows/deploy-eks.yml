name: Deploy to EKS

on:
  # This allows manual triggers via the GitHub UI
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
      version:
        description: 'App version to deploy'
        required: false
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Check out the source code
      - name: Check out the repository
        uses: actions/checkout@v3
        
      # 2. Set up Node 18 (optional if you need Node for anything else)
      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      # 3. Install dependencies, then build (modify commands as needed)
      - name: Install dependencies
        run: |
          npm install --save-dev typescript@^4.9.5
          cd frontend
          npm install --legacy-peer-deps

        
      # 4. Configure AWS credentials (pull from GitHub Secrets)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Update if you use a different region

      # 5. (Optional) Assume a specific IAM role if needed
      #    If not needed, remove this step.
      - name: Assume IAM role
        if: ${{ env.AWS_ROLE_TO_ASSUME != '' }}
        run: |
          CREDENTIALS=$(aws sts assume-role \
            --role-arn ${{ env.AWS_ROLE_TO_ASSUME }} \
            --role-session-name GitHubActionsSession)
          export AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDENTIALS | jq -r '.Credentials.SessionToken')

      # 6. Install kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl

      # 7. Update kubeconfig to point to your EKS cluster
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region us-east-1 --name YOUR_CLUSTER_NAME

      # 8. Build Docker image
      - name: Build Docker image
        run: |
          docker build -t juice-shop:latest .

      # 9. Log in to Amazon ECR
      - name: Log in to ECR
        run: |
          aws ecr get-login-password --region us-east-1 | \
            docker login --username AWS --password-stdin jm-lab

      # 10. Tag and push image to Amazon ECR
      - name: Tag and push Docker image
        run: |
          # Use SHA or another tag you prefer
          IMAGE_TAG=${{ github.sha }}
          
          docker tag juice-shop:latest jm-lab/juiceshop:$IMAGE_TAG:$IMAGE_TAG
          docker push jm-lab/juiceshop:$IMAGE_TAG

      # 11. Deploy to EKS by updating the existing Kubernetes Deployment
      - name: Deploy to EKS
        run: |
          # Example: update the 'juice-shop' container in a 'juice-shop' deployment
          IMAGE_TAG=${{ github.sha }}
          kubectl set image deployment/juice-shop \
            juice-shop=jm-lab/juiceshop:$IMAGE_TAG
          ###juice-shop=YOUR_ECR_REGISTRY/YOUR_ECR_REPOSITORY:$IMAGE_TAG jm-lab/juiceshop
