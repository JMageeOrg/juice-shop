name: Deploy to EKS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "production"
      version:
        description: "App version to deploy"
        required: false
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Check out the repository
      - name: Check out the repository
        uses: actions/checkout@v3

      # 2. Set up Node.js 18 (for npm tasks)
      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      # 3. Install dependencies for frontend
      - name: Install dependencies
        run: |
          npm install --save-dev typescript@^4.9.5
          cd frontend
          npm install --legacy-peer-deps

      # 4. Configure AWS credentials using static keys from GitHub Secrets
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

   # 5. Install kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl

      # 6. Reset any old kubeconfig file
      - name: Reset kubeconfig
        run: rm -f $HOME/.kube/config

      # 7. Update kubeconfig to point to your EKS cluster (replace YOUR_CLUSTER_NAME)
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name jmlab-eks-cluster
          echo "Kubeconfig (minified):"
          kubectl config view --minify

      # 8. Set the KUBECONFIG environment variable explicitly for subsequent kubectl commands
      - name: Set KUBECONFIG environment variable
        run: echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

      # 9. Debug: Fetch token details to verify authentication
      - name: Debug get-token
        run: |
          echo "Fetching token for cluster jmlab-eks-cluster"
          aws eks get-token --cluster-name jmlab-eks-cluster --region us-east-1

      # 10. Verify cluster connectivity (should list pods)
      - name: Verify cluster connectivity
        run: kubectl get pods --all-namespaces

      # 10. Build Docker image (using your Dockerfile)
      - name: Build Docker image
        run: docker build -t juice-shop:latest .

      # 11. Log in to Amazon ECR (using the full registry URL)
      - name: Log in to ECR
        run: |
          aws ecr get-login-password --region us-east-1 | \
            docker login --username AWS --password-stdin 285653935315.dkr.ecr.us-east-1.amazonaws.com

      # 12. Tag and push Docker image to ECR
      - name: Tag and push Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
           docker tag juice-shop:latest 285653935315.dkr.ecr.us-east-1.amazonaws.com/jm-lab/juiceshop:${{ github.sha }}
          docker push 285653935315.dkr.ecr.us-east-1.amazonaws.com/jm-lab/juiceshop:${{ github.sha }}

      # 13. Deploy to EKS by updating the Kubernetes Deployment in the "jm-lab" namespace
      - name: Deploy to EKS
        run: |
          IMAGE_TAG=${{ github.sha }}
          kubectl set image deployment/juice-shop -n jm-lab \
            juice-shop=285653935315.dkr.ecr.us-east-1.amazonaws.com/jm-lab/juiceshop:${{ github.sha }}
